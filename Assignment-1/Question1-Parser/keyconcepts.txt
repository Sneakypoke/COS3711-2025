# Key Concepts for Qt Text Analysis Project

## Qt Core Concepts
1. QCoreApplication
   - Base class for non-GUI applications
   - Handles event loop and application lifecycle
   - Required for any Qt application

2. QCommandLineParser
   - Parses command-line arguments
   - Supports options, flags, and positional arguments
   - Provides built-in help and version options

3. QString and QStringList
   - Qt's string handling classes
   - QStringList for collections of strings
   - Unicode support and efficient string operations

## File Handling
1. QFile
   - File I/O operations
   - File opening modes (ReadOnly, Text)
   - Error handling and status checking

2. QTextStream
   - Text file reading/writing
   - Character encoding handling
   - Stream-based file operations

3. QFileInfo
   - File path manipulation
   - File existence checking
   - Absolute/relative path conversion

4. QDir
   - Directory operations
   - Path manipulation
   - Working directory management

## Regular Expressions
1. QRegularExpression
   - Pattern matching
   - Static pattern optimization
   - Global matching with iterators

2. Regex Patterns Used
   - Word boundaries (\b)
   - Character classes ([A-Z], [a-z], etc.)
   - Quantifiers (+, *, {4,})
   - Negative lookahead ([^...])
   - Capturing groups and backreferences

3. Pattern Categories
   - Capital long words: \b[A-Z][a-zA-Z]{4,}\b
   - Hyphenated words: \b\w+-\w+\b
   - Same start/end: \b(\w)\w*\1\b
   - Non-vowel start: \b[^aeiouAEIOU]\w*\b

## Memory Management
1. Qt's Parent-Child Model
   - Automatic memory management
   - Object ownership
   - Proper cleanup

2. Static Members
   - Pattern optimization
   - Shared resources
   - Memory efficiency

## Best Practices
1. Error Handling
   - File operation checks
   - Pattern validation
   - User feedback

2. Code Organization
   - Class-based design
   - Separation of concerns
   - Clean interfaces

3. Output Formatting
   - Consistent formatting
   - Clear user feedback
   - Structured results

## Build System
1. CMake
   - Project configuration
   - Qt integration
   - Build settings

2. Qt Build System
   - MOC (Meta-Object Compiler)
   - Resource compilation
   - Dependency management

## Development Tools
1. Qt Creator
   - IDE features
   - Debugging
   - Project management

2. Working Directory
   - Path management
   - File location
   - Build configuration

## Testing
1. Test File Creation
   - Pattern verification
   - Edge cases
   - Multiple file handling

2. Output Verification
   - Result counting
   - Pattern matching
   - Format checking
