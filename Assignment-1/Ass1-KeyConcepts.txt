# COS3711 Assignment 1 - Key Concepts

## Question 1: Text Analysis Application

### Core Functionality
1. Command Line Processing
   - QCoreApplication for non-GUI application
   - QCommandLineParser for argument handling
   - Support for multiple input formats and flags

2. Regular Expression Processing
   - QRegularExpression for pattern matching
   - Pattern optimization and global matching
   - Complex pattern categories:
     * Capital long words: \b[A-Z][a-zA-Z]{4,}\b
     * Hyphenated words: \b\w+-\w+\b
     * Same start/end: \b(\w)\w*\1\b
     * Non-vowel start: \b[^aeiouAEIOU]\w*\b

3. File Handling
   - QFile for I/O operations
   - QTextStream for text processing
   - QFileInfo for path manipulation
   - QDir for directory operations

## Question 2: Banking Transactions

### Core Functionality
1. Transaction Management
   - Transaction class for data storage
   - TransactionList singleton for management
   - Type-safe enumeration for categories

2. GUI Components
   - QMainWindow framework
   - QLineEdit for input
   - QPushButton for actions
   - QLabel for display
   - QTimer for real-time updates

3. File Operations
   - Transaction logging
   - Data persistence
   - Error handling

## Question 3: Calculator Application

### Design Patterns
1. Factory Method Pattern
   - OperationFactory for creating operations
   - Dynamic operation instantiation
   - Extensible design

2. Singleton Pattern
   - Single OperationFactory instance
   - Global access point
   - Thread-safe implementation

### Object-Oriented Design
1. Abstract Base Class
   - Operation with pure virtual compute()
   - Polymorphic behavior
   - Interface definition

2. Inheritance Hierarchy
   - Addition, Subtraction, Multiplication, Division
   - Specialized implementations
   - Common interface

### GUI Implementation
1. Qt Widgets
   - QDoubleSpinBox for numeric input
   - QPushButton for operations
   - QLCDNumber for display
   - QMessageBox for notifications

2. Layout Management
   - QVBoxLayout and QHBoxLayout
   - Widget organization
   - Responsive design

## Common Concepts Across Questions

### Error Handling
1. Input Validation
   - Range checking
   - Type validation
   - User feedback

2. Exception Handling
   - Runtime errors
   - File operations
   - Mathematical operations

3. User Feedback
   - Error messages
   - Status updates
   - Operation confirmation

### Memory Management
1. Qt Mechanisms
   - Parent-child relationships
   - Automatic cleanup
   - Resource management

2. Modern C++ Features
   - Smart pointers
   - RAII principles
   - Exception safety

### Best Practices
1. Code Organization
   - Separation of concerns
   - Class-based design
   - Clean interfaces

2. Design Principles
   - Single Responsibility
   - Open/Closed Principle
   - Interface Segregation

### Build System
1. CMake Configuration
   - Project setup
   - Dependency management
   - Build options

2. Qt Integration
   - MOC compilation
   - Resource handling
   - Library linking

### Development Tools
1. Qt Creator
   - IDE features
   - Debugging tools
   - Project management

2. Version Control
   - Git integration
   - Change tracking
   - Collaborative development

### Testing Strategies
1. Unit Testing
   - Component isolation
   - Edge cases
   - Error conditions

2. Integration Testing
   - Component interaction
   - System flow
   - User scenarios
